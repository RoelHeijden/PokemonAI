----------------------------------------------------------------------------------------------------------------

explore 2-deep tree search using NE to get scores for each depth

update speed range after instruction (e.g. when checking the case where the bot outspeeds, update speed range in that branch)?

do something with hidden_power_type in battler.from_team_json()

Keep track of potential choice scarf speed_range -- you might know a mon is not max speed scarf before choice scarf is revealed

for bo3 module: update speed_range_check() and others on final turn as well.

find edge case mistakes (like burned pokemon with guts having attack halved), abilities not working in state instructions (Download, synchronize), rocky helmet

fix ability order for turn 1 in instruction generator

extend program to random battles

Implement pressure for pp counting -- see battle_modifier.move()

implement whirlpool trapping knowledge for state simulation (objects.py, side.trapped())

fix damage calculation being calced too often in find_all_state_instructions()

implement trapping knowledge of the opponent for: mean look, jaw lock, block, etc.. (moves that trap untill KO'd or switched)

multi-hit moves KOing a pokemon can wrongfully cause the 'does not have choice band' flag to be set: compares max damage vs damage done by first hit

----------------------------------------------------------------------------------------------------------------


double check the teams
double check 'Safest' knowledge on opp team (check hp numbers for known and unknown pokemon)
Experiment
- FWG simple mirror
- Simple competitive mirror
- Complex competitive mirror
- Simple vs Complex
- Complex vs simple


PAYOFF MATRIX
    1. extend the function
        - for each possible ability: get_possible_abilities()
            - how to accumulate state_instructions (all prob*0.5, and add concatonate instructions to same list?)
        - for each item: get_possible_items()
            - how to initiate the item list (and probabilities?)
            - how to remove (via deduction) items from this list as the game progresses
        - for each bulk/offense

INFO MANAGEMENT
    1. Keep track of revealed abilities (e.g. Grassy surge)
    2. add terrain healing, intimidate, weather and status damage order to speed_range checker
    3. create has_boosting_item flag
    4. double check choice band/specs detection
    5. create hp range (currently set to 84 EVs hp I believe)
    7. add probabilities to outspeeding/underspeeding
    8. Create Bayesian model for "bulk" and "offense" initialized via usage stats


NASH EQUILIBRIUM
    1. when NE is uniform (doesn't matter which of the N options you pick), pick one with highest average if opp deviates off NE
    2. find the 'best' NE (check if this is being done in Quantecon)
    3. Figure out if Bayesian NE is possible with Quantecon

VALUE NETWORK
    1. research
    2. create
    3. check how u-turn decisions change with the value net



