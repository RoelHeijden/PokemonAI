----------------------------------------------------------------------------------------------------------------
DO AT SOME POINT

update speed range after instruction (e.g. when checking the case where the bot outspeeds, update speed range in that branch)?

do something with hidden_power_type in battler.from_team_json()

Keep track of potential choice scarf speed_range -- you might know a mon is not max speed scarf before choice scarf is revealed

for bo3 module: update speed_range_check() and others on final turn as well.

find edge case mistakes (like burned pokemon with guts having attack halved), abilities not working in state instructions (Download, synchronize)

fix ability order for turn 1 in instruction generator

extend program to random battles

Implement pressure for pp counting (in battle_modifier.move())

----------------------------------------------------------------------------------------------------------------

test current mid-turn U-turn approach

find a good team for the AI (mirror match-able)
Request training data !!
Experiment time




STATE INSTRUCTIONS
    3. further test whether switching moves are correctly implemented
    4. fix damage calculation being calced too often in find_all_state_instructions()


SPEED ORDERS
    2. add terrain healing, intimidate, weather and status damage order to speed_range checker
    3. add probabilities to outspeeding/underspeeding


DAMAGE ROLLS
    4. Create Bayesian model for "bulk" and "offense" initialized via usage stats


PAYOFF MATRIX
    3. extend the function
        - for each ability
            - how to accumulate state_instructions (all prob*0.5, and add concatonate instructions to same list?)
        - for each item
            - how to initiate the item list (and probabilities?)
            - how to remove (via deduction) items from this list as the game progresses
        - for each spread??
        - for crit / no crit
    4. explore 2-deep tree search using NE to get scores for each depth


INFO MANAGEMENT
    1. Keep track of revealed abilities (e.g. Grassy surge)
    2. Choice item move locks should work (AI knows opponent has Choice band, but doesn't know the move is locked)
    3. Moves like whirlpool should work (e.g. AI doesn't know the opponent is trapped)


NASH EQUILIBRIUM
    2. find the 'best' NE (check if this is being done in Quantecon)
    3. Figure out if Bayesian NE is possible with Quantecon





50 games vs 'Safest'
W: 35, L: 15
50 games with teams switched around:
W: 3 , L: 37
;_;


VRAGEN AAN JOHAN
    - Bayesian Nash equilibrium
        - for elke mogelijke gamestate: columns van elke matrix*prior samenvoegen tot een matrix?
    - Bayesian model for opp stats
        -
    - Schrijven
        - hoe ver dan zijn met schrijven bij de first draft deadline?
        - welke stukken moeten/mogen verwerkt worden:
            - (relevante) uitleg over het spel/strategiÃ«n?
            - details binnen de AI buiten de info models, NE en NN (speed range checker, damage calc, etc)?
            - uitleg over (Bayesian) Nash equilibria. Theoretisch bewijs?
            - Tekortkomingen van de AI (geen depth=2 search, geen belief van de tegenstander)?
            -

    - Value network input layer
    - hoeveel stop je in de paper? Uitleg van het spel? Edge cases? Bugs?