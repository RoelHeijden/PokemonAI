----------------------------------------------------------------------------------------------------------------

explore 2-deep tree search using NE to get scores for each depth

update speed range after instruction (e.g. when checking the case where the bot outspeeds, update speed range in that branch)?

Keep track of potential choice scarf speed_range -- you might know a mon is not max speed scarf before choice scarf is revealed

for bo3 module: update speed_range_check() and others on final turn as well.

find edge case mistakes (like burned pokemon with guts having attack halved), abilities not working in state instructions (Download, synchronize), rocky helmet

fix ability order for turn 1 in instruction generator

extend Bot to random battles

Implement pressure for pp counting -- see battle_modifier.move()

fix damage calculation being calced too often in find_all_state_instructions()

implement whirlpool trapping knowledge for state simulation (objects.py, side.trapped())

implement trapping knowledge of the opponent for: mean look, jaw lock, block, etc.. (moves that trap untill KO'd or switched)

multi-hit moves KOing a pokemon can wrongfully cause the 'does not have choice band' flag to be set: compares max damage vs damage done by first hit

detect speed range if faster mon is unable to move (freeze, para, etc)

KO's when the knocked out pokemon was using a -priotiy move wrongfully sets the speed range

update pokemon.original_attributes for non-full-info games when intializing the Pokemon, and when moves/abilities/stats are found

fix move pp updating for unknown moves (e.g. Struggle. I the move is now permanently added to the move list)

fix/implement Illusion in game_parser


----------------------------------------------------------------------------------------------------------------



INFO MANAGEMENT
    1. Items
        - check/create item deduction functions (e.g. cannot have Life orb, cannot have Leftovers, etc)
        - create has_boosting_item flag (and create boosting item list in constants)
    2. Abilities
        - double check if tracking revealed abilities (e.g. Grassy surge) works well
    3. Speed
        - add terrain healing, intimidate, weather and status damage order to speed_range checker
        - add probabilities to outspeeding/underspeeding
    4. Bulk
        - set hp value between 0-100 (max_hp currently set to 84 EVs hp I believe)
        - create Bayesian model for "bulk" initialized via usage stats
    5. Offense
        - create Bayesian model for "offense" initialized via usage stats
    6. Expand payoff matrix
        - for each possible ability (temporarily set the ability)
        - for each possible item (temporarily set the item)
        - for each bulk/offense/speed range(?)


NASH EQUILIBRIUM
    1. when NE is uniform (doesn't matter which of the N options you pick), pick one with highest average in the case the opp deviates from calculated NE
    2. find the 'best' NE (check if this is being done in Quantecon)
    3. Figure out if Bayesian NE is possible via Quantecon


----------------------------------------------------------------------------------------------------------------


STATE SIMULATOR:
    1. if one pokemon fainted: evaluate possible switches and pick highest/lowest value? (and remove these one-active states from the data)
    2. if both pokemon fainted: evaluate normally?


ENVIRONMENT
    1. check role of hidden_power_type in battler.from_team_json()


ONCE NN WORKS
    1. return max/min value when game state is win/loss
    2. add weather/terrain/trick room counter to state (in engine and simulator)
    3. add last_used to move (in engine and simulator)
    4. add first_turn_out to Pokemon (in engine and simulator)
    5. check how NE u-turn decisions change once evaluation is proper





